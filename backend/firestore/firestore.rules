rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function onlyFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    function owns() {
      return resource.data.createdBy == request.auth.uid;
    }

    function isRole(role) {
      return request.resource.auth.token.role == role;
    }

    function loggedIn() {
      return request.auth != null;
    }

    function always() {
      return true;
    }

    function never() {
      return false;
    }

    function userObject() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid))
    }

    match /problems/{problem} {
      allow read: if always(); // anyone can read
      allow create: if loggedIn(); // anyone logged in can create
      allow update: if owns() || onlyFields(['upvotes']) || !isRole("student");
      allow delete: if owns() || !isRole("student");
    }

    match /posts/{post} {
      allow read: if always(); // anyone can read
      allow create: if loggedIn(); // anyone logged in can create
      allow update: if owns() || onlyFields(['likes']) || !isRole("student");
      allow delete: if owns() || !isRole("student");
    }

    match /help_posts/{post} {
      allow read: if always(); // anyone can read
      allow create: if loggedIn(); // anyone logged in can create
      allow update: if owns() || onlyFields(['upvotes']) || !isRole("student");
      allow delete: if owns() || !isRole("student");
    }

    match /users/{user} {
      allow read: if loggedIn() && request.auth.uid == resource.data.id;
      allow update: if loggedIn() && request.auth.uid == resource.data.id && !onlyFields(["typing_lesson"]); // todo: admins can update
      allow create: if always();
      allow delete: if (loggedIn() && resource.data.id == request.auth.uid) || request.resource.auth.token.role != "student";
    }

    match /typing_lessons/{post} {
      allow read: if loggedIn() && resource.data.id == userObject().data.typing_lesson;
      allow write: if never();
    }

    match /typing_history/{post} {
      allow read: if isRole("teacher"); // todo check the class so other teachers can't read from classes they aren't assigned to
      allow create: if loggedIn();
      allow delete: if never();
      allow update: if never();
    }
  }
}
